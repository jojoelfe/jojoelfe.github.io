const i=document.createElement("template");i.innerHTML=`
  <style>
    :host {
      display: inline-block;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-tap-highlight-color: transparent;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      touch-action: none;
      user-select: none;
      cursor: pointer;
    }
    #rotator {
      display: block;
      --angle: 0rad;
      transform: rotate(var(--angle));
      will-change: transform;
    }
  </style>
  <div id="rotator" part="rotator"><slot></slot></div>`;window.ShadyCSS&&ShadyCSS.prepareTemplate(i,"input-knob");const e=2*Math.PI;class s extends HTMLElement{constructor(){super();window.ShadyCSS&&ShadyCSS.styleElement(this),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(i.content.cloneNode(!0)),this._rotator=this.shadowRoot.getElementById("rotator"),this._fallback=null,this._drawState=this._drawState.bind(this),this._onMousedown=this._onMousedown.bind(this),this._onMousemove=this._onMousemove.bind(this),this._onMouseup=this._onMouseup.bind(this),this._onPointerdown=this._onPointerdown.bind(this),this._onPointermove=this._onPointermove.bind(this),this._onPointerup=this._onPointerup.bind(this),this._onTouchend=this._onTouchend.bind(this),this._onTouchmove=this._onTouchmove.bind(this),this._onTouchstart=this._onTouchstart.bind(this),this._rotationStart=this._rotationStart.bind(this),this._rotationChange=this._rotationChange.bind(this),this._rotationEnd=this._rotationEnd.bind(this)}static get observedAttributes(){return["value","scale","min","max"]}get value(){return this.hasAttribute("value")?this.getAttribute("value"):0}set value(t){this.setAttribute("value",parseFloat(t))}get scale(){return this.hasAttribute("scale")?this.getAttribute("scale"):1}set scale(t){this.setAttribute("scale",parseFloat(t))}get min(){return this.hasAttribute("min")?this.getAttribute("min"):null}set min(t){this.setAttribute("min",parseFloat(t))}get max(){return this.hasAttribute("max")?this.getAttribute("max"):null}set max(t){this.setAttribute("max",parseFloat(t))}connectedCallback(){if(!this._rotator.part){for(this._fallback=document.createElement("span"),this._fallback.style.setProperty("--angle",`${this._angle}rad`),this._fallback.style.setProperty("transform","rotate(var(--angle))"),this._fallback.style.setProperty("-webkit-tap-highlight-color","transparent");this.childNodes.length>0;)this._fallback.appendChild(this.childNodes[0]);this._fallback.classList.add("fallback"),this.classList.add("fallback"),this.append(this._fallback)}this._drawState(),"PointerEvent"in window?this.addEventListener("pointerdown",this._onPointerdown):(this.addEventListener("touchstart",this._onTouchstart),this.addEventListener("mousedown",this._onMousedown))}disconnectedCallback(){"PointerEvent"in window?this.removeEventListener("pointerdown",this._onPointerdown):(this.removeEventListener("touchstart",this._onTouchstart),this.removeEventListener("mousedown",this._onMousedown))}attributeChangedCallback(t,n,h){this._angle=e/this.scale*(this.value%this.scale),this._rotations=Math.floor(this.value/this.scale),this._drawState()}_drawState(){let t=this._rotator;this._fallback!==null&&(t=this._fallback),t.style.setProperty("--angle",`${this._angle}rad`)}_rotationStart(){window.oncontextmenu=()=>!1;const t=this.getBoundingClientRect();this._centerX=t.left-this.scrollLeft+this.clientLeft+this.offsetWidth/2,this._centerY=t.top-this.scrollTop+this.clientTop+this.offsetHeight/2,this._initialAngle=this._angle,this._attemptedAngle=this._angle,this._attemptedRotations=this._rotations,this._initialTouchAngle=Math.atan2(this._touchY-this._centerY,this._touchX-this._centerX);const n=new Event("knob-move-start",{bubbles:!0});this.dispatchEvent(n)}_rotationChange(){this._previousAttemptedAngle=this._attemptedAngle,this._attemptedAngle=this._initialAngle-this._initialTouchAngle+Math.atan2(this._touchY-this._centerY,this._touchX-this._centerX),this._attemptedAngle=(this._attemptedAngle+e)%e,this.max!==null&&this.min!==null&&(this._attemptedAngle<1.57&&this._previousAttemptedAngle>4.71?this._attemptedRotations++:this._previousAttemptedAngle<1.57&&this._attemptedAngle>4.71&&this._attemptedRotations--),this._attemptedValue=this._attemptedAngle/(e/this.scale)+this.scale*this._attemptedRotations,(this.min===null||this._attemptedValue>=this.min)&&(this.max===null||this._attemptedValue<=this.max)?(this._angle=this._attemptedAngle,this._rotations=this._attemptedRotations,this.value=this._attemptedValue):this._attemptedValue<this.min?this.value=this.min:this._attemptedValue>this.max&&(this.value=this.max);const t=new Event("knob-move-change",{bubbles:!0});this.dispatchEvent(t)}_rotationEnd(){window.oncontextmenu=null;const t=new Event("knob-move-end",{bubbles:!0});this.dispatchEvent(t)}_onPointerdown(t){t.preventDefault(),this._touchX=t.clientX,this._touchY=t.clientY,this._rotationStart(),this.setPointerCapture(t.pointerId),this.addEventListener("pointermove",this._onPointermove),this.addEventListener("pointerup",this._onPointerup),this.addEventListener("pointercancel",this._onPointerup)}_onPointermove(t){t.preventDefault(),this._touchX=t.clientX,this._touchY=t.clientY,this._rotationChange()}_onPointerup(t){t.preventDefault(),this._rotationEnd(),this.releasePointerCapture(t.pointerId),this.removeEventListener("pointermove",this._onPointermove),this.removeEventListener("pointerup",this._onPointerup),this.removeEventListener("pointercancel",this._onPointerup)}_onMousedown(t){this._touchX=t.clientX,this._touchY=t.clientY,this._rotationStart(),document.addEventListener("mousemove",this._onMousemove),document.addEventListener("mouseup",this._onMouseup)}_onMousemove(t){t.preventDefault(),this._touchX=t.clientX,this._touchY=t.clientY,this._rotationChange()}_onMouseup(t){t.preventDefault(),document.removeEventListener("mousemove",this._onMousemove),document.removeEventListener("mouseup",this._onMouseup),this._rotationEnd()}_onTouchstart(t){t.preventDefault(),this._touchX=t.changedTouches[0].clientX,this._touchY=t.changedTouches[0].clientY,this._rotationStart(),this.addEventListener("touchmove",this._onTouchmove),this.addEventListener("touchend",this._onTouchend),this.addEventListener("touchcancel",this._onTouchend)}_onTouchmove(t){t.preventDefault(),this._touchX=t.targetTouches[0].clientX,this._touchY=t.targetTouches[0].clientY,this._rotationChange()}_onTouchend(t){t.preventDefault(),this.removeEventListener("touchmove",this._onTouchmove),this.removeEventListener("touchend",this._onTouchend),this.removeEventListener("touchcancel",this._onTouchend),this._rotationEnd()}}customElements.define("input-knob",s);export{s as default};
